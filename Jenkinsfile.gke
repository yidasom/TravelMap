pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        // 백엔드 이미지 정보
        BACKEND_IMAGE_TAG = "v1.0.0"
        BACKEND_IMAGE_NAME = "somlh1212/travelmap-backend:${BACKEND_IMAGE_TAG}"
        BACKEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-backend:latest"

        // 프론트엔드 이미지 정보
        FRONTEND_IMAGE_TAG = "v1.0.0"
        FRONTEND_IMAGE_NAME = "somlh1212/travelmap-frontend:${FRONTEND_IMAGE_TAG}"
        FRONTEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-frontend:latest"

        // GKE 정보
        GKE_PROJECT = 'cogent-spirit-468810-j1'
        GKE_REGION = 'asia-northeast3'
        GKE_CLUSTER_NAME = 'travelmap-cluster'

        NAMESPACE = "travelmap-gke"
    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-credentials',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                dir('backend') {
                    sh """
                    docker buildx build \\
                      --platform linux/arm64,linux/amd64 \\
                      -t ${BACKEND_IMAGE_NAME} \\
                      -t ${BACKEND_IMAGE_LATEST_NAME} \\
                      --push .
                """
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    // npm 의존성 설치 및 빌드
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh """
                        docker buildx build \\
                          --platform linux/arm64,linux/amd64 \\
                          -t ${FRONTEND_IMAGE_NAME} \\
                          -t ${FRONTEND_IMAGE_LATEST_NAME} \\
                          --push .
                    """
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gke-credentials', variable: 'GCP_SERVICE_KEY_FILE')]) {
                        sh "gcloud auth activate-service-account --key-file=${GCP_SERVICE_KEY_FILE}"
                        sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --region ${GKE_REGION} --project ${GKE_PROJECT}"
                    }
                    def context = "gke_cogent-spirit-468810-j1_asia-northeast3_travelmap-cluster"
                    sh "kubectl config use-context ${context}"
                    // 네임스페이스가 없는 경우 생성
                    sh "kubectl create namespace ${NAMESPACE} || true"

                    sh "kubectl apply -f /home/jenkins/k8s/secret.yaml -n ${NAMESPACE}"
                    sh "kubectl apply -f /home/jenkins/k8s/secret-external.yaml -n ${NAMESPACE}"

                    // Helm 배포
                    sh """
                        helm upgrade --install travelmap ./helm/travelmap \\
                          --namespace ${NAMESPACE} \\
                          --create-namespace \\
                          --values ./helm/travelmap/values-gke.yaml \\
                          --set backend.image.tag=${BACKEND_IMAGE_TAG} \\
                          --set frontend.image.tag=${FRONTEND_IMAGE_TAG} \\
                          --set backend.resources.requests.cpu=250m \\
                          --set backend.resources.requests.memory=512Mi \\
                          --set backend.resources.limits.cpu=500m \\
                          --set backend.resources.limits.memory=1Gi \\
                          --set frontend.resources.requests.cpu=200m \\
                          --set frontend.resources.requests.memory=256Mi \\
                          --set frontend.resources.limits.cpu=400m \\
                          --set frontend.resources.limits.memory=512Mi
                        """

//                    def context = "gke_cogent-spirit-468810-j1_asia-northeast3_travelmap-cluster"
//
//                    // 경로를 Jenkinsfile 기준으로 수정
//                    sh "kubectl --context=${context} apply -f /home/jenkins/k8s/secret.yaml"
//                    sh "kubectl --context=${context} apply -f ./k8s/db/gke-postgres-pvc.yaml"
//                    sh "kubectl --context=${context} apply -f ./k8s/db/postgres-deployment.yaml"
////                    sh "kubectl set env deployment/postgres POSTGRES_PVC_NAME=gke-postgres-pvc"
//
//
//                    // PostgreSQL 배포 완료 대기
//                    sh "kubectl --context=${context} rollout status deployment/postgres"
//
//                    sh "sed -i 's|travelmap-backend:latest|travelmap-backend:${BACKEND_IMAGE_TAG}|g' ./k8s/deployment.yaml"
//                    sh "sed -i 's|travelmap-frontend:latest|travelmap-frontend:${FRONTEND_IMAGE_TAG}|g' ./k8s/frontend-deployment.yaml"
//
//                    sh "kubectl --context=${context} apply -f ./k8s/deployment.yaml"
//                    sh "kubectl --context=${context} apply -f ./k8s/frontend-deployment.yaml"
//
//                    sh "kubectl rollout status deployment/travelmap-deployment"
//                    sh "kubectl rollout status deployment/travelmap-frontend-deployment"
//
//                    sh "kubectl --context=${context} apply -f ./k8s/service.yaml"
//                    sh "kubectl --context=${context} apply -f ./k8s/gke-service.yaml"
                }
            }
        }

        stage('Wait for Deployment Rollout') {
            steps {
                sh """
                   kubectl -n ${NAMESPACE} rollout status deployment/travelmap-backend
                   kubectl -n ${NAMESPACE} rollout status deployment/travelmap-frontend
                """
            }
        }
    }
}
