pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        // 백엔드 이미지 정보
        BACKEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        BACKEND_IMAGE_NAME = "somlh1212/travelmap-backend:${BACKEND_IMAGE_TAG}"
        BACKEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-backend:latest"

        // 프론트엔드 이미지 정보
        FRONTEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        FRONTEND_IMAGE_NAME = "somlh1212/travelmap-frontend:${FRONTEND_IMAGE_TAG}"
        FRONTEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-frontend:latest"
    }

    stages {
        stage('Build Backend') {
            steps {
                dir('backend') {
                    // 모든 캐시를 지우고 다시 빌드
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                dir('backend') {
                    sh """
                docker buildx create --use --name multiarch-builder || true
                docker buildx use multiarch-builder
                docker buildx inspect --bootstrap

                docker buildx build \\
                  --platform linux/amd64 \\
                  -t ${BACKEND_IMAGE_NAME} \\
                  -t ${BACKEND_IMAGE_LATEST_NAME} \\
                  --push .
            """
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    // npm 의존성 설치 및 빌드
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh """
                docker buildx create --use --name multiarch-builder || true
                docker buildx use multiarch-builder
                docker buildx inspect --bootstrap

                docker buildx build \\
                  --platform linux/amd64 \\
                  -t ${FRONTEND_IMAGE_NAME} \\
                  -t ${FRONTEND_IMAGE_LATEST_NAME} \\
                  --push .
            """
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                script {
                    def context = "kubernetes-admin@kubernetes"

                    // Secret 먼저 적용 (기존 방식 유지)
                    sh "kubectl --context=${context} apply -f /home/jenkins/k8s/secret.yaml"

                    // Helm 배포
//                    withCredentials([file(credentialsId: 'kubeconfig-k8s', variable: 'KUBECONFIG')]) {
                        sh """
                                helm upgrade --install travelmap ./helm/travelmap \
                                  --namespace travelmap --create-namespace \
                                  -f ./helm/travelmap/values-k8s.yaml \
                                  --set backend.image.tag=${BACKEND_IMAGE_TAG} \
                                  --set frontend.image.tag=${FRONTEND_IMAGE_TAG}
                            """

                        // 배포 완료 대기
                        sh "kubectl --context=${context} -n travelmap rollout status deployment/travelmap-backend"
                        sh "kubectl --context=${context} -n travelmap rollout status deployment/travelmap-frontend"
//                    }
                }
            }
        }
    }
}