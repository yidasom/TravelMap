pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        // 백엔드 이미지 정보
        BACKEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        BACKEND_IMAGE_NAME = "somlh1212/travelmap-backend:${BACKEND_IMAGE_TAG}"
        BACKEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-backend:latest"

        // 프론트엔드 이미지 정보
        FRONTEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        FRONTEND_IMAGE_NAME = "somlh1212/travelmap-frontend:${FRONTEND_IMAGE_TAG}"
        FRONTEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-frontend:latest"

        // Node.js 빌드 시 메모리 제한 증가
        NODE_OPTIONS = "--max_old_space_size=4096"

        // GKE 정보
        GKE_PROJECT = 'cogent-spirit-468810-j1'
        GKE_REGION = 'asia-northeast3'
        GKE_CLUSTER_NAME = 'travelmap-cluster'
    }

    stages {
        stage('Build Backend') {
            steps {
                dir('backend') {
                    // 모든 캐시를 지우고 다시 빌드
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                dir('backend') {
                    // Dockerfile 내용을 Jenkinsfile에 직접 작성하여 파이프합니다.
                    // 이렇게 하면 Dockerfile 파일 자체의 줄 끝, BOM 문제 등을 완전히 해결할 수 있습니다.
                    sh """
                        docker build \\
                          --platform linux/amd64 \\
                          -t ${BACKEND_IMAGE_NAME} \\
                          -t ${BACKEND_IMAGE_LATEST_NAME} \\
                          -f - . <<EOF
FROM --platform=linux/amd64 openjdk:21-slim-buster
WORKDIR /app
COPY build/libs/*.jar app.jar
EXPOSE 8080
CMD ["java", "-jar", "app.jar"]
EOF
                    """
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    // npm 의존성 설치 및 빌드
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                dir('frontend') {
                    // docker-entrypoint.sh의 줄바꿈 형식을 dos2unix로 변환
                    sh 'dos2unix docker-entrypoint.sh'
                    sh """
                docker build \\
                  --platform linux/amd64 \\
                  -t ${FRONTEND_IMAGE_NAME} \\
                  -t ${FRONTEND_IMAGE_LATEST_NAME} \\
                  -f - . <<EOF
FROM --platform=linux/amd64 node:18-alpine AS builder
WORKDIR /app
COPY . .
RUN npm install && npm run build
FROM --platform=linux/amd64 nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
COPY docker-entrypoint.sh /docker-entrypoint.sh
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF
            """
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'gke-credentials', variable: 'GCP_SERVICE_KEY_JSON')]) {
                        sh "echo \$GCP_SERVICE_KEY_JSON > gcp-key.json"
                        sh 'gcloud auth activate-service-account --key-file=gcp-key.json'
                        sh 'gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --region ${GKE_REGION} --project ${GKE_PROJECT}'
                        sh 'rm gcp-key.json' // 보안을 위해 임시 파일 삭제
                    }
                }

                // GKE용 YAML 파일들만 사용
                sh 'kubectl apply -f /home/jenkins/k8s/secret.yaml'
                sh 'kubectl apply -f k8s/db/gke-postgres-pvc.yaml'
                sh 'kubectl apply -f k8s/db/postgres-deployment.yaml'

                // PostgreSQL 배포가 완료될 때까지 대기
                sh 'kubectl rollout status deployment/postgres'

                sh "sed -i 's|travelmap-backend:latest|travelmap-backend:${BACKEND_IMAGE_TAG}|g' k8s/deployment.yaml"
                sh "sed -i 's|travelmap-frontend:latest|travelmap-frontend:${FRONTEND_IMAGE_TAG}|g' k8s/frontend-deployment.yaml"

                sh 'kubectl apply -f k8s/deployment.yaml'
                sh 'kubectl apply -f k8s/frontend-deployment.yaml'

                // 모든 Deployment가 완료될 때까지 대기
                sh 'kubectl rollout status deployment/travelmap-deployment'
                sh 'kubectl rollout status deployment/travelmap-frontend-deployment'

                sh 'kubectl apply -f k8s/gke-backend-service.yaml'
                sh 'kubectl apply -f k8s/gke-frontend-service.yaml'
            }
        }
    }
}