pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
        jdk 'jdk-21'
        gradle 'gradle-8.14.3'
    }

    environment {
        // 백엔드 이미지 정보
        BACKEND_IMAGE_TAG = "v1.0.0"
        BACKEND_IMAGE_NAME = "somlh1212/travelmap-backend:${BACKEND_IMAGE_TAG}"
        BACKEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-backend:latest"

        // 프론트엔드 이미지 정보
        FRONTEND_IMAGE_TAG = "v1.0.0"
        FRONTEND_IMAGE_NAME = "somlh1212/travelmap-frontend:${FRONTEND_IMAGE_TAG}"
        FRONTEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-frontend:latest"

        // Kubernetes context
        K8S_CONTEXT = "kubernetes-admin@kubernetes"
        NAMESPACE = "travelmap-k8s"

        REACT_APP_API_URL = "http://travelmap-backend:8080"
    }

    stages {

        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                dir('backend') {
                    sh """
                    docker buildx build \\
                      --platform linux/arm64,linux/amd64 \\
                      -t ${BACKEND_IMAGE_NAME} \\
                      -t ${BACKEND_IMAGE_LATEST_NAME} \\
                      --push .
                    """
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh '''
                        echo ">> REACT_APP_API_URL=${REACT_APP_API_URL}"
                        export REACT_APP_API_URL=${REACT_APP_API_URL}
                        npm install
                        npm run build
                    '''
                    sh """
                        docker buildx build --platform linux/arm64,linux/amd64 \\
                            -t ${FRONTEND_IMAGE_NAME} \\
                            -t ${FRONTEND_IMAGE_LATEST_NAME} \\
                            --push .
                    """
                }
            }
        }

        stage('Prepare Namespace & Secrets') {
            steps {
                sh """
                  kubectl --context=${K8S_CONTEXT} apply -f /home/jenkins/k8s/secret.yaml -n ${NAMESPACE}
                  kubectl --context=${K8S_CONTEXT} apply -f /home/jenkins/k8s/secret-external.yaml -n ${NAMESPACE}
                """
            }
        }

        stage('Deploy with Helm') {
            steps {
                sh """
                  kubectl config use-context ${K8S_CONTEXT}
                  helm upgrade --install travelmap ./helm/travelmap \\
                    --namespace ${NAMESPACE} \\
                    --create-namespace \\
                    -f ./helm/travelmap/values-k8s.yaml \\
                    --set backend.image.tag=${BACKEND_IMAGE_TAG} \\
                    --set frontend.image.tag=${FRONTEND_IMAGE_TAG}
                """
            }
        }


        stage('Wait for Deployment Rollout') {
            steps {
                sh """
                    kubectl --context=${K8S_CONTEXT} -n ${NAMESPACE} rollout status deployment/travelmap-backend
                    kubectl --context=${K8S_CONTEXT} -n ${NAMESPACE} rollout status deployment/travelmap-frontend
                """
            }
        }
    }
}
