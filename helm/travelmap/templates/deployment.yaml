apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "travelmap.fullname" . }}-backend
  labels:
    {{- include "travelmap.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "travelmap.fullname" . }}-backend
  template:
    metadata:
      labels:
        app: {{ include "travelmap.fullname" . }}-backend
    spec:
      # --- 여기에 imagePullSecrets 필드를 추가 ---
      imagePullSecrets:
        - name: dockerhub-credentials
      # ---------------------------------------------
      containers:
        - name: backend-container
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.backend.service.port }}
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "{{ .Values.backend.env.SPRING_PROFILES_ACTIVE }}"

            # DB 환경 변수 설정
            - name: SPRING_DATASOURCE_URL
#              value: "jdbc:postgresql://travelmap-postgres.travelmap-gke.svc.cluster.local:5432/travelmap"
              value: "jdbc:postgresql://{{ include "travelmap.fullname" . }}-postgres.{{ .Release.Namespace }}.svc.cluster.local:5432/travelmap"
            - name: SPRING_DATASOURCE_USERNAME
              value: "{{ .Values.db.username }}"
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.secrets.dbPassword.secretName }}
                  key: {{ .Values.backend.secrets.dbPassword.secretKey }}

            # YouTube API Key 설정
            - name: YOUTUBE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.secrets.youtubeApiKey.secretName }}
                  key: {{ .Values.backend.secrets.youtubeApiKey.secretKey }}

          livenessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: {{ .Values.backend.service.port }}
            initialDelaySeconds: 60
            periodSeconds: 15
            failureThreshold: 5
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "travelmap.fullname" . }}-frontend
  labels:
    {{- include "travelmap.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.frontend.replicaCount | default .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "travelmap.fullname" . }}-frontend
  template:
    metadata:
      labels:
        app: {{ include "travelmap.fullname" . }}-frontend
      annotations:
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
        - name: dockerhub-credentials
      containers:
        - name: frontend
          image: "{{ .Values.frontend.image.repository }}:{{ .Values.frontend.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.frontend.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.frontend.service.port }}
              protocol: TCP
          env:
            {{- range .Values.frontend.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.frontend.service.port }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.frontend.service.port }}
          resources:
            {{- toYaml .Values.frontend.resources | nindent 12 }}


---

{{- if .Values.db.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "travelmap.fullname" . }}-postgres
  labels:
    app: {{ include "travelmap.fullname" . }}-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ include "travelmap.fullname" . }}-postgres
  template:
    metadata:
      labels:
        app: {{ include "travelmap.fullname" . }}-postgres
    spec:
      containers:
          - name: postgres
            image: postgres:16
            env:
              - name: POSTGRES_USER
                value: {{ .Values.db.username }}
              - name: POSTGRES_PASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.db.password.secretName }}
                    key: {{ .Values.db.password.secretKey }}
            ports:
              - containerPort: {{ .Values.db.port }}
            volumeMounts:
              - name: postgres-storage
                mountPath: /var/lib/postgresql/data
                {{- if .Values.local.enabled }}
                subPath: ""
                {{- else }}
                subPath: {{ .Values.db.persistence.subPath | default "" }}
                {{- end }}
      volumes:
        - name: postgres-storage
          {{- if .Values.local.enabled }}
          emptyDir: {}
          {{- else }}
          persistentVolumeClaim:
            claimName: {{ include "travelmap.fullname" . }}-postgres-pvc
          {{- end }}

---
{{- if and .Values.db.enabled (not .Values.local.enabled) }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "travelmap.fullname" . }}-postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.db.persistence.size }}
  storageClassName: {{ .Values.db.persistence.storageClass }}
{{- end }}
{{- end }}