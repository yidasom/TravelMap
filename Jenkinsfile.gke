pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        // 백엔드 이미지 정보
        BACKEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        BACKEND_IMAGE_NAME = "somlh1212/travelmap-backend:${BACKEND_IMAGE_TAG}"
        BACKEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-backend:latest"

        // 프론트엔드 이미지 정보
        FRONTEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        FRONTEND_IMAGE_NAME = "somlh1212/travelmap-frontend:${FRONTEND_IMAGE_TAG}"
        FRONTEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-frontend:latest"

        // Node.js 빌드 시 메모리 제한 증가
        NODE_OPTIONS = "--max_old_space_size=4096"

        // GKE 정보
        GKE_PROJECT = 'cogent-spirit-468810-j1'
        GKE_REGION = 'asia-northeast3'
        GKE_CLUSTER_NAME = 'travelmap-cluster'
    }

    stages {
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(
                        credentialsId: 'dockerhub-credentials',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_PASS'
                )]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        }

        stage('Build Backend') {
            steps {
                dir('backend') {
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                dir('backend') {
                    sh """
                        docker build \\
                          --platform linux/amd64 \\
                          -t ${BACKEND_IMAGE_NAME} \\
                          -t ${BACKEND_IMAGE_LATEST_NAME} \\
                          -f - . <<EOF
FROM --platform=linux/amd64 openjdk:21-slim-buster
WORKDIR /app
COPY build/libs/*.jar app.jar
EXPOSE 8080
CMD ["java", "-jar", "app.jar"]
EOF

                docker push ${BACKEND_IMAGE_NAME}
                docker push ${BACKEND_IMAGE_LATEST_NAME}
                    """
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    // npm 의존성 설치 및 빌드
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh """
                docker build \\
                  -t ${FRONTEND_IMAGE_NAME} \\
                  -t ${FRONTEND_IMAGE_LATEST_NAME} \\
                  -f - . <<EOF
FROM node:18-alpine AS builder
WORKDIR /app
COPY . .
RUN npm install && npm run build
FROM nginx:alpine
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF

                docker push ${FRONTEND_IMAGE_NAME}
                docker push ${FRONTEND_IMAGE_LATEST_NAME}
            """
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gke-credentials', variable: 'GCP_SERVICE_KEY_FILE')]) {
                        sh "gcloud auth activate-service-account --key-file=${GCP_SERVICE_KEY_FILE}"
                        sh "gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --region ${GKE_REGION} --project ${GKE_PROJECT}"
                    }

                    // 경로를 Jenkinsfile 기준으로 수정
                    sh 'kubectl apply -f /home/jenkins/k8s/secret.yaml'
                    sh "kubectl apply -f ./k8s/db/gke-postgres-pvc.yaml"
                    sh "kubectl apply -f ./k8s/db/postgres-deployment.yaml"

                    // PostgreSQL 배포 완료 대기
                    sh "kubectl rollout status deployment/postgres"

                    // 리눅스 sed 문법으로 수정
                    sh """
                        sed -i "s|travelmap-backend:latest|travelmap-backend:${BACKEND_IMAGE_TAG}|g" ./k8s/deployment.yaml
                        sed -i "s|travelmap-frontend:latest|travelmap-frontend:${FRONTEND_IMAGE_TAG}|g" ./k8s/frontend-deployment.yaml
                    """

                    // 배포
                    sh "kubectl apply -f ./k8s/deployment.yaml"
                    sh "kubectl apply -f ./k8s/frontend-deployment.yaml"

                    // 롤아웃 완료 대기
                    sh "kubectl rollout status deployment/travelmap-deployment"
                    sh "kubectl rollout status deployment/travelmap-frontend-deployment"

                    // 서비스 적용
                    sh "kubectl apply -f ./k8s/service.yaml"
                    sh "kubectl apply -f ./k8s/gke-service.yaml"
                }
            }
        }
    }
}