pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        // 백엔드 이미지 정보
        BACKEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        BACKEND_IMAGE_NAME = "somlh1212/travelmap-backend:${BACKEND_IMAGE_TAG}"
        BACKEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-backend:latest"

        // 프론트엔드 이미지 정보
        FRONTEND_IMAGE_TAG = "${env.BUILD_NUMBER}"
        FRONTEND_IMAGE_NAME = "somlh1212/travelmap-frontend:${FRONTEND_IMAGE_TAG}"
        FRONTEND_IMAGE_LATEST_NAME = "somlh1212/travelmap-frontend:latest"
    }

    stages {
        stage('Build Backend') {
            steps {
                dir('backend') {
                    // 모든 캐시를 지우고 다시 빌드
                    sh './gradlew clean build'
                }
            }
        }

        stage('Build & Push Backend Docker Image') {
            steps {
                dir('backend') {
                    sh """
                docker buildx create --use --name multiarch-builder || true
                docker buildx use multiarch-builder
                docker buildx inspect --bootstrap

                docker buildx build \\
                  --platform linux/amd64 \\
                  -t ${BACKEND_IMAGE_NAME} \\
                  -t ${BACKEND_IMAGE_LATEST_NAME} \\
                  --push .
            """
                }
            }
        }

        stage('Build Frontend') {
            steps {
                dir('frontend') {
                    // npm 의존성 설치 및 빌드
                    sh 'npm install'
                    sh 'npm run build'
                }
            }
        }

        stage('Build & Push Frontend Docker Image') {
            steps {
                dir('frontend') {
                    sh """
                docker buildx create --use --name multiarch-builder || true
                docker buildx use multiarch-builder
                docker buildx inspect --bootstrap

                docker buildx build \\
                  --platform linux/amd64 \\
                  -t ${FRONTEND_IMAGE_NAME} \\
                  -t ${FRONTEND_IMAGE_LATEST_NAME} \\
                  --push .
            """
                }
            }
        }

        stage('Deploy to K8s') {
            steps {
                script {
                    def context = "kubernetes-admin@kubernetes"
                    // Secret 먼저 적용
                    sh 'kubectl --context=${context} apply -f /home/jenkins/k8s/secret.yaml'

                    // PV/PVC/Deployment 적용
                    sh 'kubectl --context=${context} apply -f ./k8s/db/k8s-postgres-pv.yaml'
                    sh 'kubectl --context=${context} apply -f ./k8s/db/k8s-postgres-pvc.yaml'
                    sh 'kubectl set env deployment/postgres POSTGRES_PVC_NAME=postgres-pvc'
                    sh 'kubectl --context=${context} apply -f ./k8s/db/postgres-deployment.yaml'

                    // PostgreSQL 배포가 완료될 때까지 대기
                    sh 'kubectl rollout status deployment/postgres'

                    // Deployment 이미지 업데이트
                    sh "sed -i 's|travelmap-backend:latest|travelmap-backend:${BACKEND_IMAGE_TAG}|g' ./k8s/deployment.yaml"
                    sh "sed -i 's|travelmap-frontend:latest|travelmap-frontend:${FRONTEND_IMAGE_TAG}|g' ./k8s/frontend-deployment.yaml"

                    sh 'kubectl --context=${context} apply -f ./k8s/deployment.yaml'
                    sh 'kubectl --context=${context} apply -f ./k8s/frontend-deployment.yaml'

                    // 모든 Deployment가 완료될 때까지 대기
                    sh 'kubectl rollout status deployment/travelmap-deployment'
                    sh 'kubectl rollout status deployment/travelmap-frontend-deployment'

                    // 백엔드와 프론트엔드 Service를 배포
                    sh 'kubectl --context=${context} apply -f ./k8s/service.yaml'
                    sh 'kubectl --context=${context} apply -f ./k8s/frontend-service.yaml'
                }
            }
        }
    }
}